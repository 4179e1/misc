# After each line of the test script is executed the shell traps to this
# function.

function _steptrap
{
	_curline=$1	#the number of the line just ran
	
	(( $_trace ))&& _msg "PS4 line $_curline: ${_lines[$_curline]}"

	if (( $stemp >= 0 ));then
		let _steps="$_step - 1"
	fi

# First check to see if a line number breakpoint was reached.
# If it was, then enter the debugger.
if _at_linenumbp; then
	_msg "Reached breakpoint at line $_curline"
	_cmdloop

# It wasn't, so check whether a break condition exists and is true.
# If it is, then enter the debugger.
elif [ -n "$_brcond" ] && eval $_brcond; then
	_msg "Reached condition $_brcond true at line $_curline"
	_cmdloop

# It wasn't, so check if we are in step mode and the number of steps
# is up. If it is then enter the debugger.
elif (( $_steps == 0 )); then
	_msg "Stopped at line $_curline"
	_cmdloop
fi
}

function _cmdloop {
	local cmd args

	while read -e -p "bashdb>" cmd args; do
		case $cmd in
			\? | h) _menu;;		# print command menu
			bc) _setbc $args;;	# set a break condition
			bp) _setbp $args;;	# set a breakpoint at given line
			cb) _clearbp $args;; # clear one or all breakpoints
			ds) _displayscript;; # list the script and show the breakpoints
			g) return;;			# "go": start/resume execution of the script
			q) exit;;			# quit
			s) let_steps=${args:-1} # single step N times (default = 1)
			   return;;
			x) _xtrace;;		# toggle execution trace
			!*) eval ${cmd#!} $args;; # pass to the shell
			*) _msg "Invalid command: '$cmd'";;
		esac
	done
}

# Set a breakpoint at the given line number or list breakpoints
function _setbp
{
	local i
	if [ -z "$1" ]; then
		_listbp
	elif [ $(echo $1 | grep '^[[:digit:]]*') ];then
		if [ -n "${_lines[$1]}" ];then
			_linebp=($(echo $((for i in ${_linebp[*]} $1; do
							echo $i; done) | sort -n)))
			_msg "Breakpoint set at line $1"
		else
			_msg "Breakpoints can only be set on non-blank lines"
		fi
	else
		_msg "Please specify a numeric line number"
	fi
}

function _clearbp
{
	local i

	if [ -z "$1" ]; then
		unset _linebp[*]
		_msg "All breakpoints have been cheared"
	elif [ $(echo $1 | grep '^[[:digit:]]*') ];then
		_linebp=($(echo $(for i in ${_linebp[*]};do
					if (( $1 != $i )); then echo $i; fi; done)))
		_msg "Breakpoint cleared at line $1"
	else
		_msg "Please specify a numeric line number"
	fi
}

